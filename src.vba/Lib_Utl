Attribute VB_Name = "Lib_Utl"
Option Explicit

Public Const CELL_REFRESH_STATUS = "Parameters!$C$1"

Public REFRESH_IN_PROGRESS As Boolean

Public Type struct_refresh_item
  name As String
  feedBackRangeStr As String
  sheetName As String
  relocateColShiftValue As Long
End Type

Public Type struct_refresh_list
   itemsList(1 To 20) As struct_refresh_item
   tableObj As ListObject
   numItems As Long
   sheetName As String
End Type



Public Sub Util_GetLocalPath_TestMe()
   Dim pathStr As String
   
   pathStr = Util_GetLocalPath
   
   Debug.Print pathStr

End Sub

Public Function Utl_FindRowByCellValue(sheetObj As Worksheet, valueToFind As String, colNumber As Long, Optional startRow As Long = 1, Optional maxRowsToScan As Long = 100) As Long
 ' ==========================================================================================================
    ' Procedure Name : Utl_FindRowByCellValue
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Parameter envirObj (struct_CSP_Envir)
    ' Author: Luc Van Overveldt  Create date: 19/3/2021
    ' ==========================================================================================================
    Const DBG_FNCNAME = " Utl_FindRowByValue": Const DBG_MODNAME = "Lib_CSP_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Long
    Dim cellValue As String
    Dim valueToFindUC As String
    Dim rowIDX As Long
    
    valueToFindUC = UCase(Trim(valueToFind))
   
    For rowIDX = startRow To maxRowsToScan
      cellValue = UCase(Trim(sheetObj.Cells(rowIDX, colNumber).Value))
      If (cellValue = valueToFindUC) Then
       retVal = rowIDX
       GoTo end_of_function
      End If
    Next rowIDX
    
    retVal = -100
   
    
  
end_of_function:
    Utl_FindRowByCellValue = retVal

    Exit Function


exit_with_error:
    retVal = -1
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    Debug.Print errMess
  
    GoTo end_of_function


End Function


Private Function Util_GetLocalPath() As String
  ' ==========================================================================================================
    ' Procedure Name : Util_GetLocalPath
    ' Procedure Info : Get the path of the file but take care of ONedrive functionality
    '
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
      
    On Error GoTo exit_with_error
    Dim ShellScript As Object
    Dim strOneDriveLocalPath As String
    Dim strFileURL As String
    Dim iTryCount As Integer
    Dim strRegKeyName As String
    Dim strFileEndPath As String
    Dim iDocumentsPosition As Integer
    Dim i4thSlashPosition As Integer
    Dim iSlashCount As Integer
    Dim blnFileExist As Boolean
    Dim objFSO As Object
    Dim retVal As String
    
    strFileURL = LCase(ThisWorkbook.FullName)
    
    '
    ' If this is a regular path... pass it along
    '
    If (InStr(LCase(strFileURL), "http") = 0) Then
     retVal = strFileURL
     GoTo end_of_function
    End If
    
    '
    ' create shell scripting object
    '
    On Error GoTo exit_with_error
    
    Set ShellScript = CreateObject("WScript.Shell")
    '3 possible registry keys to be checked
    For iTryCount = 1 To 3
        Select Case (iTryCount)
            Case 1:
                strRegKeyName = "OneDriveCommercial"
            Case 2:
                strRegKeyName = "OneDriveConsumer"
            Case 3:
                strRegKeyName = "OneDrive"
        End Select
        On Error Resume Next
        strOneDriveLocalPath = ShellScript.RegRead("HKEY_CURRENT_USER\Environment\" & strRegKeyName)
        'check if OneDrive location found
        
        On Error GoTo exit_with_error
        If strOneDriveLocalPath = vbNullString Then GoTo next_key
            
        'for commercial OneDrive file path seems to be like "https://companyName-my.sharepoint.com/personal/userName_domain_com/Documents" & file.FullName)
        If (InStr(strFileURL, "my.sharepoint.com") <> 0) Then
          'find "/Documents" in string and replace everything before the end with OneDrive local path
          iDocumentsPosition = InStr(1, strFileURL, "/documents") + Len("/documents") 'find "/documents" position in file URL
          strFileEndPath = Mid(strFileURL, iDocumentsPosition, Len(strFileURL) - iDocumentsPosition + 1)  'get the ending file path without pointer in OneDrive
        End If
            
        'for personal onedrive it looks like "https://d.docs.live.net/d7bbaa#######1/" & file.FullName, _
        '   by replacing "https.." with OneDrive local path obtained from registry we can get local file path
        If InStr(1, strFileURL, "d.docs.live.net") <> 0 Then
          iSlashCount = 1
          i4thSlashPosition = 1
          Do Until iSlashCount > 4
              i4thSlashPosition = InStr(i4thSlashPosition + 1, strFileURL, "/")   'loop 4 times, looking for "/" after last found
              iSlashCount = iSlashCount + 1
          Loop
          strFileEndPath = Mid(strFileURL, i4thSlashPosition, Len(strFileURL) - i4thSlashPosition + 1)  'get the ending file path without pointer in OneDrive
        End If
        
        If Len(strFileEndPath) > 0 Then 'check if path found
            strFileEndPath = Replace(strFileEndPath, "/", "\")  'flip slashes from URL type to File path type
            retVal = strOneDriveLocalPath & strFileEndPath    'this is the final file path on Local drive
            'verify if file exist in this location and exit for loop if True
            If objFSO Is Nothing Then Set objFSO = CreateObject("Scripting.FileSystemObject")
            If objFSO.FileExist(retVal) Then
                blnFileExist = True     'that is it - WE GOT IT
                GoTo end_of_function
            Else
                blnFileExist = False    'not there try another OneDrive type (personal/business)
            End If
        End If
        
next_key:
    Next iTryCount
    
    'display message if file could not be located in any OneDrive folders
    If Not blnFileExist Then Debug.Print "File not found on onedrive"
    
    
end_of_function:
    'clean up
    Set ShellScript = Nothing
    Set objFSO = Nothing
    Util_GetLocalPath = retVal
    
    Exit Function
    
exit_with_error:
    retVal = ""
    GoTo end_of_function
     

    
    
End Function

Public Sub Utl_PivotTable_RefreshAll()
    ' ==========================================================================================================
    ' Procedure Name : Utl_PivotTable_RefreshAll
    ' Procedure Info : Refresh all pivot tables in the workbook
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 18/07/2022
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_PivotTable_RefreshAll": Const DBG_MODNAME = "Lib_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer


    Dim sheetObj As Worksheet
    Dim pv As PivotTable
    
    For Each sheetObj In ActiveWorkbook.Sheets
        For Each pv In sheetObj.PivotTables
            pv.PivotCache.Refresh
            Debug.Print "PivotTable " & pv.name & " on sheet " & sheetObj.name & " refreshed "
        Next
    Next


end_of_function:
  

    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
 
    GoTo end_of_function

 


End Sub





Public Function Utl_PivotTable_Refresh(sheetName As String, pivotTableName As String, Optional pauseNumSecs As Integer = 0) As Integer
 ' ==========================================================================================================
    ' Procedure Name : Utl_PivotTable_Refresh
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Parameter sheetName (string)
    ' Parameter pivotTableName (string)
    ' Author: Luc Van Overveldt  Create date: 19/3/2021
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Table_Refresh": Const DBG_MODNAME = "Lib_CSP_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim sheetObj As Worksheet
    
    Dim savedIndent As String: savedIndent = G_ENVIROBJ.logFileIndent
    G_ENVIROBJ.logFileIndent = G_ENVIROBJ.logFileIndent + BASE_INDENT
   
    Set sheetObj = ActiveWorkbook.Worksheets(sheetName)
   
    sheetObj.PivotTables(pivotTableName).PivotCache.Refresh
    DoEvents
    Call Util_PauseApp(pauseNumSecs)
    Call Util_WriteLogMessage("PivotTable " & pivotTableName & " on sheet " & sheetName & " refreshed ")


    retVal = 1
  
end_of_function:
    Utl_PivotTable_Refresh = retVal
    G_ENVIROBJ.logFileIndent = savedIndent
    Exit Function


exit_with_error:
    retVal = -1
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    Debug.Print errMess
  
    GoTo end_of_function


End Function


Public Sub Util_PauseApp(numSecs As Integer)
' ==========================================================================================================
    ' Procedure Name : Util_PauseApp
    ' Procedure Info : Save a sheet to pdf
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim timeStr As String
   
    Dim time1, time2

    If (numSecs = 0) Then GoTo end_of_function

    timeStr = "0:00:" + Trim(Str(numSecs))
    time1 = Now
    time2 = Now + TimeValue(timeStr)
    
    Do Until time1 >= time2
        DoEvents
        time1 = Now()
    Loop
  
    
end_of_function:
    
    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function







End Sub



Public Function Util_MakeDir(dirTocreate As String) As Integer
    ' ==========================================================================================================
    ' Procedure Name : Util_MakeDir
    ' Procedure Info : Create a file dir
    '
    ' Procedure Access: Public
    ' Parameter dirTocreate (String)
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
   
    Dim elm As Variant
    Dim strCheckPath As String

    strCheckPath = ""
    For Each elm In Split(dirTocreate, "\")
        strCheckPath = strCheckPath & elm & "\"
        If Len(Dir(strCheckPath, vbDirectory)) = 0 Then MkDir strCheckPath
    Next

    retVal = 1
    
end_of_function:
    Util_MakeDir = retVal
 

    Exit Function


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_MakeDir, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function

 


End Function

Public Sub Util_CondFmt_SetAppliesTo(sheetObj As Worksheet, ruleIDX As Long, appliesToStr As String)
    ' ==========================================================================================================
    ' Procedure Name : Util_CondFmt_SetAppliesTo
    ' Procedure Info : Create a file dir
    '
    ' Procedure Access: Public
    ' Parameter dirTocreate (String)
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim fc As FormatCondition
   
   
    Set fc = sheetObj.Cells.FormatConditions(ruleIDX)
   
    fc.ModifyAppliesToRange Range(appliesToStr)

end_of_function:
    
 

    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_MakeDir, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function

 


End Sub


Public Sub Util_WriteLogMessage(messToWrite As String, Optional indentstr As String = "USE_GLOBAL", Optional doUnderline As Boolean = False)
    ' ==========================================================================================================
    ' Procedure Name : Util_WriteLogMessage
    ' Procedure Info : Write a log message
    '
    ' Procedure Access: Public
    ' Parameter messToWrite (String)
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim realIndent As String
    
    realIndent = indentstr
    If (realIndent = "USE_GLOBAL") Then realIndent = ""
    
   
    Debug.Print realIndent & " " & messToWrite

    
end_of_function:
    

    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_MakeDir, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function

 


End Sub

Public Function Util_SaveSheetToPDF(sheetObj As Worksheet, filePath As String) As Integer
    ' ==========================================================================================================
    ' Procedure Name : Util_SaveSheetToPDF
    ' Procedure Info : Save a sheet to pdf
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
   
    sheetObj.ExportAsFixedFormat Type:=xlTypePDF, Filename:=filePath _
        , Quality:=xlQualityStandard, IncludeDocProperties:=True, IgnorePrintAreas:=False, OpenAfterPublish:=False
  
    
end_of_function:
    Util_SaveSheetToPDF = retVal
 

    Exit Function


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function

 


End Function



Sub Utl_Format_ClearBorders(rng As Range)
    ' ==========================================================================================================
    ' Procedure Name : Utl_Format_ClearBorders
    ' Procedure Info : clear the border of a range
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
   
    With rng
    .Borders(xlDiagonalDown).LineStyle = xlNone
    .Borders(xlDiagonalUp).LineStyle = xlNone
    .Borders(xlEdgeLeft).LineStyle = xlNone
    .Borders(xlEdgeTop).LineStyle = xlNone
    .Borders(xlEdgeBottom).LineStyle = xlNone
    .Borders(xlEdgeRight).LineStyle = xlNone
    .Borders(xlInsideVertical).LineStyle = xlNone
    .Borders(xlInsideHorizontal).LineStyle = xlNone
    End With
    
end_of_function:
  
    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function

End Sub

Sub Utl_Format_Borders_SetOutline(templateRng As Range, rng As Range)
    ' ==========================================================================================================
    ' Procedure Name : Utl_Format_SetOutline
    ' Procedure Info : set the outline of a range using a template range
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
   
    With rng
    .Borders(xlEdgeLeft).LineStyle = templateRng.Borders(xlEdgeLeft).LineStyle
    .Borders(xlEdgeTop).LineStyle = templateRng.Borders(xlEdgeTop).LineStyle
    .Borders(xlEdgeBottom).LineStyle = templateRng.Borders(xlEdgeBottom).LineStyle
    .Borders(xlEdgeRight).LineStyle = templateRng.Borders(xlEdgeRight).LineStyle
    End With
    
end_of_function:
  
    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function

End Sub




Sub Utl_Format_ClearFill(rng As Range)
    ' ==========================================================================================================
    ' Procedure Name : Utl_Format_ClearFill
    ' Procedure Info : clear the fill of a range
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
   

   
    With rng.Interior
  
      .Color = xlNone
      .ColorIndex = 0
      .Pattern = xlNone
      .TintAndShade = 0
      .PatternTintAndShade = 0
    End With
    
end_of_function:
  
    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function


End Sub

Sub Utl_Format_Paint(templateRng As Range, destRng As Range)
    ' ==========================================================================================================
    ' Procedure Name : Utl_Format_Paint
    ' Procedure Info : Do a format paint
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    
    templateRng.Copy
        
    destRng.PasteSpecial Paste:=xlPasteFormats, Operation:=xlNone, SkipBlanks:=False, Transpose:=False
    Application.CutCopyMode = False
    

end_of_function:
  
    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function


End Sub

Sub Utl_Format_SetColor(rng As Range, colNum As Long)
    ' ==========================================================================================================
    ' Procedure Name : Utl_Format_SetColor
    ' Procedure Info : Set the color of a range
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    
    With rng.Interior
        .Pattern = xlSolid
        .PatternColorIndex = xlAutomatic
        .Color = colNum
        .TintAndShade = 0
        .PatternTintAndShade = 0
    End With
    

end_of_function:
  
    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function


End Sub


Sub Utl_Format_MergeAndCenter(rng As Range)
    ' ==========================================================================================================
    ' Procedure Name : Utl_Format_MergeAndCenter
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 27/02/2021
    ' ==========================================================================================================
    Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    
    
    With rng
        .Merge
        .HorizontalAlignment = xlCenter
        .VerticalAlignment = xlCenter
        .WrapText = False
        .Orientation = 0
        .AddIndent = False
        .IndentLevel = 0
        .ShrinkToFit = False
        .ReadingOrder = xlContext
        .MergeCells = True
    End With
    

end_of_function:
  
    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in Util_SaveSheetToPDF, line " & Erl & "."
    Debug.Print errMess
    retVal = -1
    GoTo end_of_function


End Sub


Public Function Utl_Table_Refresh(inSheetName As String, tableName As String, indexCnt As Integer, Optional pauseNumSecs As Integer = 0) As Integer
    ' ==========================================================================================================
    ' Procedure Name : Utl_Table_Refresh
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Parameter sheetName (string)
    ' Parameter tableName (string)
    ' Author: Luc Van Overveldt  Create date: 19/3/2021
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Table_Refresh": Const DBG_MODNAME = "Lib_CSP_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim sheetObj As Worksheet
    Dim tableObj As ListObject
    Dim indexCntStr As String
    Dim sheetName As String
    
    sheetName = inSheetName
    
    Call Util_RefreshStatField("Tablerefresh  " & tableName)
 
    If (sheetName = "") Then
      Set tableObj = Utl_Table_FindTableObj(tableName)
      If (tableObj Is Nothing) Then
        errMess = "** Error ** Utl_Table : Table " + tableName + " Not Found on any sheet"
        GoTo exit_with_error
      End If
      Set sheetObj = tableObj.DataBodyRange.Worksheet
      sheetName = sheetObj.name
    Else
        errMess = "** Error ** Utl_Table : Sheet " + sheetName + " Not Found"
        Set sheetObj = ActiveWorkbook.Worksheets(sheetName)
      
        errMess = "** Error ** Utl_Table : Table " + tableName + " Not Found on sheet " + sheetName
   
        Set tableObj = sheetObj.ListObjects(tableName)
    End If
   
    errMess = ""
   
    tableObj.QueryTable.Refresh BackgroundQuery:=False
    DoEvents
    
    indexCnt = indexCnt + 1
    indexCntStr = Format(indexCnt, "00") + ". "
    Call Util_PauseApp(pauseNumSecs)
    Call Util_WriteLogMessage(indexCntStr & "Table " & tableName & " on sheet " & sheetName & " refreshed ")

  
end_of_function:
    Utl_Table_Refresh = retVal
  
    Exit Function


exit_with_error:
    retVal = -1
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    Debug.Print errMess
  
    GoTo end_of_function


End Function

Public Sub Utl_Table_RelocateTable(inSheetName As String, tableName As String, destColPos As Long, destRowPos As Long)
    ' ==========================================================================================================
    ' Procedure Name : Utl_Table_RelocateTable
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Parameter sheetName (string)
    ' Parameter tableName (string)
    ' Author: Luc Van Overveldt  Create date: 19/3/2021
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Table_RelocateTable": Const DBG_MODNAME = "Lib_CSP_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim sheetObj As Worksheet
    Dim tableObj As ListObject
    Dim indexCntStr As String
    Dim sheetName As String
    Dim tableRng As Range
    Dim newLocRng As Range
    Dim colIDX As Long
    Dim rowIDX As Long
    
    sheetName = inSheetName
    If (sheetName = "") Then
      Set tableObj = Utl_Table_FindTableObj(tableName)
      If (tableObj Is Nothing) Then
        errMess = "** Error ** Utl_Table : Table " + tableName + " Not Found on any sheet"
        GoTo exit_with_error
      End If
      Set sheetObj = tableObj.DataBodyRange.Worksheet
      sheetName = sheetObj.name
    Else
        errMess = "** Error ** Utl_Table : Sheet " + sheetName + " Not Found"
        Set sheetObj = ActiveWorkbook.Worksheets(sheetName)
      
        errMess = "** Error ** Utl_Table : Table " + tableName + " Not Found on sheet " + sheetName
   
        Set tableObj = sheetObj.ListObjects(tableName)
    End If
   
    errMess = ""
   
    '
    ' Take care of the shift
    '
    Set tableRng = tableObj.Range
 
    
    Set newLocRng = sheetObj.Cells(destRowPos, destColPos)
    
    Call tableRng.Cut(newLocRng)
    
    
end_of_function:
    
    Exit Sub


exit_with_error:
    retVal = -1
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    Debug.Print errMess
  
    GoTo end_of_function


End Sub



Public Sub Utl_Table_FilterField(inSheetName As String, tableName As String, fieldName As String, Optional fieldValues As String = "CLEAR")
    ' ==========================================================================================================
    ' Procedure Name : Utl_Table_FilterField
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Parameter inSheetName (String)
    ' Parameter tableName (String)
    ' Parameter fieldName (String)
    ' Parameter fieldValues (String)
    ' Author: Luc Van Overveldt  Create date: 10/03/2023
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Table_FilterField": Const DBG_MODNAME = "Lib_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
   
    Dim sheetObj As Worksheet
    Dim tableObj As ListObject
    Dim fldObj As ListColumn
    
    Dim indexCntStr As String
    Dim sheetName As String
    Dim iCol As Integer
    
    sheetName = inSheetName
    
    'Call Util_RefreshStatField("Tablerefresh  " & tableName)
'
' Pick up table object
'
    If (sheetName = "") Then
        Set tableObj = Utl_Table_FindTableObj(tableName)
        If (tableObj Is Nothing) Then
            errMess = "** Error ** Utl_Table : Table " + tableName + " Not Found on any sheet"
            GoTo exit_with_error
        End If
        Set sheetObj = tableObj.DataBodyRange.Worksheet
        sheetName = sheetObj.name
    Else
        errMess = "** Error ** Utl_Table : Sheet " + sheetName + " Not Found"
        Set sheetObj = ActiveWorkbook.Worksheets(sheetName)
      
        errMess = "** Error ** Utl_Table : Table " + tableName + " Not Found on sheet " + sheetName
   
        Set tableObj = sheetObj.ListObjects(tableName)
    End If
   
    errMess = ""
   '
   ' Pick up column to use
   '
    iCol = tableObj.ListColumns(fieldName).Index
    
    If (fieldValues <> "CLEAR") Then
       tableObj.Range.AutoFilter Field:=iCol, Criteria1:=fieldValues
    Else
       tableObj.Range.AutoFilter Field:=iCol
    End If
       
       
  
   
    
end_of_function:
    ' Utl_Table_FilterField  = retVal
 

    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    If (C_ERR_VERBOSE = True) Then Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
  
    GoTo end_of_function

 


End Sub

   


   

Public Sub Utl_Table_DumpTableNames()
    ' ==========================================================================================================
    ' Procedure Name : Utl_Table_DumpTableNames
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 16/12/2022
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Table_DumpTableNames": Const DBG_MODNAME = "Lib_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    
    Dim sheetObj As Worksheet
    Dim tableObj As ListObject

    For Each sheetObj In ActiveWorkbook.Sheets
        For Each tableObj In sheetObj.ListObjects
         If (tableObj.SourceType <> xlSrcRange And tableObj.SourceType <> xlSrcXml) Then
           Debug.Print tableObj.name
         End If
        Next tableObj
    Next sheetObj
    
   


    
end_of_function:
    ' Utl_Table_DumpTableNames  = retVal
 

    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    If (C_ERR_VERBOSE = True) Then Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
  
    GoTo end_of_function

 


End Sub


Public Function Utl_Table_FindTableObj(tableName As String) As ListObject
    ' ==========================================================================================================
    ' Procedure Name : Utl_Table_FindTableObj            Return Type: ListObject
    ' Procedure Info : Find a table in a workbook
    '
    ' Procedure Access: Public
    ' Parameter tableName (String)
    ' Author: Luc Van Overveldt  Create date: 14/12/2022
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Table_FindTableObj": Const DBG_MODNAME = "Lib_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As ListObject

    Dim sheetObj As Worksheet

    For Each sheetObj In ActiveWorkbook.Sheets
        On Error Resume Next
        Set retVal = sheetObj.ListObjects(tableName)
        On Error GoTo exit_with_error
        If Not retVal Is Nothing Then
            GoTo end_of_function
        End If
    Next sheetObj

    
end_of_function:
    Set Utl_Table_FindTableObj = retVal
 

    Exit Function


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    If (C_ERR_VERBOSE = True) Then Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
    Set retVal = Nothing
    GoTo end_of_function

 


End Function

Public Sub Util_RefreshStatField(Optional messToSet As String = "TIMESTAMP")
 ' ==========================================================================================================
    ' Procedure Name : Util_RefreshStatField
    '
    ' Author: Luc Van Overveldt  Create date: 19/3/2021
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Util_RefreshStatField": Const DBG_MODNAME = "Lib_Lib": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As String
    
    Dim rng As Range
   
    Dim sheetName As String
    Dim sheetObj As Worksheet
    Dim pos As Integer
    Dim realMessToset As String
    Dim cellValue As String
   
    sheetName = CELL_REFRESH_STATUS
    pos = InStr(sheetName, "!")
    
    If (pos < 1) Then GoTo exit_with_error
    
    sheetName = Trim(Left(sheetName, pos - 1))
    
    Set sheetObj = ActiveWorkbook.Sheets(sheetName)
    
    Set rng = sheetObj.Range(CELL_REFRESH_STATUS)
    cellValue = rng.Value
    
    Set rng = sheetObj.Range(cellValue)
    
    
    realMessToset = messToSet
    
    If (realMessToset = "TIMESTAMP") Then
        realMessToset = "Last refresh : " + Format(Now(), "dd-mm-yy hh:nn")
    End If
    
    If (realMessToset = "PROGRESS") Then
        realMessToset = "Refreshing..."
    End If
        
    rng.Value = realMessToset
    
end_of_function:
   
    Exit Sub


exit_with_error:

    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    Debug.Print errMess
  
    GoTo end_of_function


End Sub



Public Sub Utl_RefreshItems_ByTable(Optional refreshListName As String = "Table_Refresh_List")
    ' ==========================================================================================================
    ' Procedure Name : Utl_Table_Refresh_ByTable
    ' Procedure Info : Refresh a series of tables based on a table
    '
    ' Procedure Access: Public
    ' Parameter refreshListName (String)
    ' Author: Luc Van Overveldt  Create date: 14/12/2022
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Table_RefreshItems_ByTable": Const DBG_MODNAME = "Lib_Util": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
  
    Dim refreshObj As struct_refresh_list
    Dim iListRow As ListRow
    Dim iListCol As ListColumn
    Dim iListRelocCol As ListColumn
    Dim iCol As Range
    Dim iRange As Range
    Dim feedBackRange As Range
    Dim currValue As String
    Dim sheetObj As Worksheet
    Dim sheetName As String
    Dim i As Integer
    Dim currTableObj As ListObject
    Dim result As Integer
    Dim cnt As Integer
    Dim relocRng As Range
    Dim tmpVal As String
    Dim destColIDX As Long
    Dim orgColIDX As Long
    Dim relocColShift As Long
    

    With refreshObj
        Set .tableObj = Utl_Table_FindTableObj(refreshListName)
        If (.tableObj Is Nothing) Then GoTo end_of_function
  
        Set sheetObj = .tableObj.DataBodyRange.Worksheet
        sheetName = sheetObj.name
        '
        ' collect the data in the table
        '
        Set iListCol = .tableObj.ListColumns("Item_Name")
        Set iListRelocCol = .tableObj.ListColumns("RelocateBefore_Refresh")
        
        For Each iRange In iListCol.DataBodyRange
            currValue = Trim(iRange.Value)
            If (currValue = "") Then GoTo next_entry
            '
            ' pick up relocfrag
            '
            Set relocRng = sheetObj.Cells(iRange.Row, iListRelocCol.Range.Column)
            tmpVal = Trim(relocRng.Value)
            
            If (Len(tmpVal) = 0) Then
              relocColShift = 0
            Else
             relocColShift = CLng(tmpVal)
            End If
          
            '
            ' store refresh data
            '
            .numItems = .numItems + 1
            .itemsList(.numItems).name = currValue
            Set feedBackRange = iRange.Offset(0, 1)
            .itemsList(.numItems).feedBackRangeStr = sheetName + "!" + feedBackRange.Address
            .itemsList(.numItems).relocateColShiftValue = relocColShift
next_entry:
        Next iRange
        '
        ' Execute the refresh
        '
        
        For i = 1 To .numItems
            
            Set currTableObj = Utl_Table_FindTableObj(.itemsList(i).name)
            If (currTableObj Is Nothing) Then GoTo next_table
            
            If (currTableObj.HeaderRowRange.EntireRow.Hidden = True) Then
               currValue = "** Warning ** No refresh . Table is hidden"
               GoTo set_status
            End If
            '
            ' relocate the table if required
            '
            
            If (.itemsList(i).relocateColShiftValue > 0) Then
                If (Not currTableObj Is Nothing) Then
                    destColIDX = currTableObj.Range.Columns.Count + .itemsList(i).relocateColShiftValue
                    orgColIDX = currTableObj.Range.Column
                    Call Utl_Table_RelocateTable("", .itemsList(i).name, destColIDX, currTableObj.Range.Row)
                End If
            End If
            '
            ' Perform actual refresh
            '
            result = Utl_Table_Refresh("", .itemsList(i).name, cnt)
        
            '
            ' move table back to org pos
            '
            If (.itemsList(i).relocateColShiftValue > 0) Then
                Set currTableObj = Utl_Table_FindTableObj(.itemsList(i).name)
                If (Not currTableObj Is Nothing) Then
                    Call Utl_Table_RelocateTable("", .itemsList(i).name, orgColIDX, currTableObj.Range.Row)
                End If
            End If
            '
            ' take care feedback
            '
            If (result < 0) Then
                currValue = "** Error ** during refresh"
            Else
                currValue = "Last refresh : " + Format(Now(), "dd-mm-yy hh:nn:ss")
            End If
            
set_status:
            Set iRange = sheetObj.Range(.itemsList(i).feedBackRangeStr)
            iRange.Value = currValue
        
next_table:
        Next
  
    End With
  
    
end_of_function:
    ' Utl_Table_Refresh_ByTable  = retVal
 

    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    If (C_ERR_VERBOSE = True) Then Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
  
    GoTo end_of_function

 


End Sub

Public Function Utl_Hyperlink_IsValidByCell(HypelinksCell As Range) As Integer
    ' ==========================================================================================================
    ' Procedure Name : Utl_Hyperlink_IsValidByCell           Return Type: String
    ' Procedure Info : Check if an hyperlink is valid by cellRange
    '
    ' Procedure Access: Private
    ' Parameter HypelinksCell (Range)
    ' Author: Luc Van Overveldt  Create date: 31/03/2023
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Hyperlink_IsValidByCell": Const DBG_MODNAME = "Lib_Utl": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim result As String
    Dim currVal As String
    
    currVal = HypelinksCell.Text
    
    retVal = Utl_Hyperlink_IsValidByURL(currVal)
    

end_of_function:
    Utl_Hyperlink_IsValidByCell = retVal
 

    Exit Function


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    If (C_ERR_VERBOSE = True) Then Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
  
   retVal = -1
  
    GoTo end_of_function

 


End Function

Public Function Utl_Hyperlink_IsValidByURL(urlDef As String) As Integer
    ' ==========================================================================================================
    ' Procedure Name : Utl_Hyperlink_IsValidByURL          Return Type: String
    ' Procedure Info : Check if an hyperlink is valid by cellRange
    '
    ' Procedure Access: Private
    ' Parameter HypelinksCell (Range)
    ' Author: Luc Van Overveldt  Create date: 31/03/2023
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Hyperlink_IsValidByCell": Const DBG_MODNAME = "Lib_Utl": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim result As String

    Dim oHttp As New MSXML2.XMLHTTP30
    Dim testStr As String
    
    'testStr = "https://delijn.sharepoint.com/:f:/r/teams/PTM-Cameratellingen/Gedeelde%20documenten/620%20Installatie/Jotforms/Jotform_2373.pdf"
    testStr = "https://delijn.sharepoint.com/:f:/r/teams/PTM-Cameratellingen/Gedeelde%20documenten/620%20Installatie/Jotforms/Jotform_2005.pdf"

   ' Call oHttp.Open("HEAD", urlDef, False)
Call oHttp.Open("HEAD", testStr, False)
    oHttp.send
   
    result = Trim(oHttp.Status & " " & oHttp.statusText)
    If (InStr(result, "404") > 0) Then
       retVal = -1
       GoTo exit_with_error
    End If

    'Debug.Print result
    
    retVal = 1
   

end_of_function:
    Utl_Hyperlink_IsValidByURL = retVal
 

    Exit Function


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    If (C_ERR_VERBOSE = True) Then Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
  
   retVal = -1
  
    GoTo end_of_function

 


End Function


Public Sub Utl_Hyperlink_DoTest()
    ' ==========================================================================================================
    ' Procedure Name : Utl_Hyperlink_DoTest
    ' Procedure Info :
    '
    ' Procedure Access: Public
    ' Author: Luc Van Overveldt  Create date: 31/03/2023
    ' ==========================================================================================================
    Const DBG_FNCNAME = "Utl_Hyperlink_DoTest": Const DBG_MODNAME = "Lib_Utl": Const C_ERR_VERBOSE = False: Dim errMess As String
    On Error GoTo exit_with_error
    Dim retVal As Integer
    Dim currURL As String

    currURL = "https://www.google.com"
    Debug.Print "Test " & currURL & " : " & Utl_Hyperlink_IsValidByURL(currURL)

     
    currURL = "https://www.gotttogle.com"
    Debug.Print "Test " & currURL & " : " & Utl_Hyperlink_IsValidByURL(currURL)
    
end_of_function:
    ' Utl_Hyperlink_DoTest  = retVal
 

    Exit Sub


exit_with_error:
    If (errMess = "") Then errMess = Err.Description Else errMess = errMess + vbCrLf + Err.Description
    Dim ErrContext As String: ErrContext = "Error in " + DBG_FNCNAME + ", line " & Erl & "."
    'Call Lib_WTPlan_DebugWrite_Error(errMess, DBG_MODNAME,DBG_FNCNAME , C_ERR_VERBOSE,errContext)
    If (C_ERR_VERBOSE = True) Then Debug.Print "== Error == " + DBG_MODNAME + "." + DBG_FNCNAME + "  : " + errMess
  
    GoTo end_of_function

 


End Sub











